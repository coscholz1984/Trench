// main global script file

// Custom dialog GUI
int dlg_opt_color = 0;
int dlg_opt_acolor = 65535;
int dlg_opt_ncolor = 4;

function dialog_options_get_dimensions(DialogOptionsRenderingInfo *info)
{
  // Create a 200x200 dialog options area at (50,100)
  info.X = 0;
  info.Y = 0;
  info.Width = 320;
  info.Height = 64;
  // Enable alpha channel for the drawing surface
  info.HasAlphaChannel = true;
  // Put the text parser at the bottom (if enabled)
  info.ParserTextBoxX = 10;
  info.ParserTextBoxY = 160;
  info.ParserTextBoxWidth = 180;
}

function dialog_options_render(DialogOptionsRenderingInfo *info)
{
  info.Surface.Clear(dlg_opt_color);
  int ypos = 0;
  // Render all the options that are enabled
  for (int i = 1; i <= info.DialogToRender.OptionCount; i++)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn)
    {
      if (info.ActiveOptionID == i)
        info.Surface.DrawingColor = dlg_opt_acolor;
      else
        info.Surface.DrawingColor = dlg_opt_ncolor;

      info.Surface.DrawStringWrapped(5, ypos, info.Width - 10,
              eFontFont0, eAlignLeft, info.DialogToRender.GetOptionText(i));
      ypos += GetTextHeight(info.DialogToRender.GetOptionText(i), eFontFont0, info.Width - 10);
    }
  }
}

function dialog_options_repexec(DialogOptionsRenderingInfo *info)
{
  info.ActiveOptionID = 0;
  if (mouse.y < info.Y || mouse.y >= info.Y + info.Height ||
      mouse.x < info.X || mouse.x >= info.X + info.Width)
  {
    return; // return if the mouse is outside UI bounds
  }

  int ypos = 0;
  // Find the option that corresponds to where the mouse cursor is
  for (int i = 1; i <= info.DialogToRender.OptionCount; i++)
  {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn)
    {
      ypos += GetTextHeight(info.DialogToRender.GetOptionText(i), eFontFont0, info.Width - 10);
      if ((mouse.y - info.Y) < ypos)
      {
        info.ActiveOptionID = i;
        return;
      }
    }
  }
}

function dialog_options_mouse_click(DialogOptionsRenderingInfo *info, MouseButton button)
{
  if (info.ActiveOptionID > 0)
    info.RunActiveOption();
}

// called when the game starts, before the first room is loaded
function game_start()
{
  // register a GUI to use for the inventory bar
  TwoClickHandler.InventoryGUI = gInventoryBar;

  // register a Label to use for action text
  TwoClickHandler.ActionLabel = lblAction;

  // optionally set the popup distance for the inventory bar
  //TwoClickHandler.PopupProportional = 0.5;
  //TwoClickHandler.PopupDistance = 50;

  // optionally reverse the left and right mouse buttons
  //TwoClickHandler.ReversedClicks = true;
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// open a GUI
function open_gui(GUI* gui_to_open)
{
  TwoClickHandler.Close();
  mouse.UseModeGraphic(eModeWalkto);
  gui_to_open.Visible = true;
}

// hide a GUI
function close_gui(GUI *gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
  if ((gInventoryBar.Visible == false) & (player.Room != 1))
  {
    gInventoryBar.Visible = true;
  }
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

// called when a key is pressed
function on_key_press(eKeyCode keycode)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gMenu.Visible)
    {
      // Escape will cancel the menu
      close_gui(gMenu);
    }
    else if (gRestoreGame.Visible)
    {
      close_gui(gRestoreGame);
    }
    else if (gSaveGame.Visible)
    {
      close_gui(gSaveGame);
    }
    else
    {
      // Escape will prompt to exit the game, unless we're in room 1
      if (player.Room != 1) {
        open_gui(gMenu);
      }
    }
  }
  else if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will open the save game dialog, unless we're in room 1
    if (player.Room != 1) {
      show_save_game_dialog();
    }
  }
  else if (keycode == eKeyF7)
  {
    // F7 will open the restore game dialog
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    if (player.Room != 1) {
      RestartGame();
    }
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // all clicks handled by TwoClickHandler script
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

function CustomSpeech(int IPortrait, int IColor, const string CharLabel, const string CharText,  int TextTime)
{
  btnPortrait.NormalGraphic = IPortrait;
  gSpeech.Visible = true;
  gSpeechLabel.TextColor = IColor;
  gSpeakerLabel.TextColor = IColor;
  gSpeakerLabel.Text = CharLabel;
  gSpeechLabel.Text = CharText;
  if (TextTime == 0) {
    TextTime = ((gSpeechLabel.Text.Length / game.text_speed) + 1) * GetGameSpeed();
    //float fTime = 2.0 * IntToFloat(gSpeechLabel.Text.Length);
    //TextTime = FloatToInt(fTime, eRoundNearest);
  }
  WaitMouseKey(TextTime);
  gSpeechLabel.Text = "";
  gSpeakerLabel.Text = "";
  gSpeech.Visible = false;
  btnPortrait.NormalGraphic = 3;
}

// top of GlobalScript.asc
void MySay(this Character*, String message) {
  // this.Say(message);  // use parameters like this
  // your custom say code here
  String CName = this.Name;
  CName.AppendChar(':');
  int iPortrait = 3;
  if (this.ID == 0) {
    iPortrait = 3;
  }
  if (this.ID == 1) {
    iPortrait = 18;
  }
  if (this.ID == 2) {
    iPortrait = 19;
  }
  if (this.ID == 3) {
    iPortrait = 17;
  }
  if (this.ID == 4) {
    iPortrait = 20;
  }
  CustomSpeech(iPortrait, this.SpeechColor, CName, message, 0);
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      //CustomSpeech(3, 928, "Player:", "I see nothing special about it.", 0);
      player.MySay("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      CustomSpeech(3, 928, "Player:", "I can't do anything with it.", 0);
      //player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      //CustomSpeech(3, 928, "Player:", "That won't do anything.", 0);
      player.MySay("That won't do anything.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      //CustomSpeech(3, 928, "Player:", "Looks alright.", 0);
      player.MySay("Looks alright.");
    }
    else if (type == 1) // interact
    {
      //CustomSpeech(3, 928, "Player:", "I don't want to have it.", 0);
      player.MySay("I don't want to have it.");
    }
    else if (type == 3) // use inv on
    {
      //CustomSpeech(3, 928, "Player:", "That's a funny idea.", 0);
      player.MySay("That's a funny idea.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      //CustomSpeech(3, 928, "Player:", "Hm.", 40);
      player.MySay("Hm.");
    }
    else if (type == 1) // interact
    {
      //CustomSpeech(3, 928, "Player:", "Got nothing to say.", 0);
      player.MySay("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      //CustomSpeech(3, 928, "Player:", "I don't think I should give that away.", 0);
      player.MySay("I don't think I should give that away.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      //CustomSpeech(3, 928, "Player:", "It's just some junk in my inventory.", 0);
      player.MySay("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      //CustomSpeech(3, 928, "Player:", "Er, no?", 0);
      player.MySay("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      //CustomSpeech(3, 928, "Player:", "That's ridiculous.", 0);
      player.MySay("That's ridiculous.");
    }
  }
}

function btnInvUp_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnExitGame_OnClick(GUIControl *control, MouseButton button)
{
  //open_gui(gExitGame);
  open_gui(gMenu);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function iCup_Interact()
{
  player.Say("I don't think drinking this would be wise.");
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i ++;
  }

  // find first free save slot, starting with slot 1
  i = 1;

  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }

    i ++;
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function gRoomBtn1_OnClick(GUIControl *control, MouseButton button)
{
  player.ChangeRoom(3, -64, 238);
  gInventoryBar.Visible = true;
}

function gRoomBtn2_OnClick(GUIControl *control, MouseButton button)
{
  player.ChangeRoom(2, -64, 238);
  gInventoryBar.Visible = true;
}

function gRoomBtn3_OnClick(GUIControl *control, MouseButton button)
{
  player.ChangeRoom(4, -64, 238);
  gInventoryBar.Visible = true;
}

function cSuperior_Interact()
{  
  if (bHelped) {
    dDialog1.Start();
  }
  else {
    if (bFoundWounded) {
      player.MySay("Commander, one of our rangers is in critical condition.");
      cSuperior.MySay("I know. But I need to make sure that we don't all get obliterated here.");
      cSuperior.MySay("If you find a way, try to help him somehow.");
    }
    else
    {
      cSuperior.MySay("We cannot get ground support. Artillary and air are already engaging. We will have to hold out here. Try to make yourself useful, soldier!");
    }
  }
}

function cSuperior_Look()
{
  player.MySay("Our commander. I'm not sure if actually knows what to do now.");
}

function cSoldierAggressive_Interact()
{
  //cSoldierAggressive.MySay("Pah. We should go back and fight like true soldiers. I'll show em! If necessary, I'll take out every single one of them alone.");
  dDialog3.Start();
}

function cSoldierAggressive_Look()
{
  player.MySay("He wants to go back and fight. But in the current situation, I think that will only get us killed.");
}

function cSoldierWounded_Interact()
{
  bFoundWounded = true;
  if (player.HasInventory(iMedkit) || bHelped) {
    if (bHelped) {
      //
      player.MySay("I stopped the bleeding and gave him some painkillers. But I'm sure we some proper medics here. He's barely concious.");
    } else {
      player.MySay("Hey! I found a medkit. Let me help out a bit.");
      //
      cSoldierWounded.MySay("Ah... Thank you! I feel much better...");
      player.ActiveInventory = null;
      player.LoseInventory(iMedkit);
      cSoldierWounded.MySay("Can you... do me a favor...");
      cSoldierWounded.MySay("If I don't make it out here alive, please send this letter to my family.");
      cSoldierWounded.MySay("I did not have a chance to contact them ever since my daughter was born.");
      cSoldierWounded.MySay("Please. I would like her to know how happy I was that day.");
      player.MySay("Of course, I'll do my best to get your letter out of here.");
      player.AddInventory(iLetter);
      bHelped = true;
    }
  }
  //
  else {
    cSoldierWounded.MySay("Ahh. I.. don't think I can hold out much longer. Please help me, I don't want to die here!");
  }
}

function cSoldierWounded_Look()
{
  bFoundWounded = true;
  player.MySay("Oh no, he's in really bad shape. I need to find something to help him, quick!");
}

function cSoldierPassive_Interact()
{
  // If create is open, close it
  gCrate.Visible = false;
  mouse.UseDefaultGraphic();
  if ((gInventoryBar.Visible == false) & (player.Room != 1))
  {
    gInventoryBar.Visible = true;
  }
  // Talk to soldier
  dDialog2.Start();
}

function cSoldierPassive_Look()
{
  player.MySay("I don't think he cares about anything anymore.");
}

function Button6_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  player.ChangeRoom(1, -100, -100);
  gInventoryBar.Visible = false;
}

function BtnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  show_save_game_dialog();
}

function BtnLoadGame_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  show_restore_game_dialog();
}

function BtnCrateGUIClose_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function BtnMark_OnClick(GUIControl *control, MouseButton button)
{
  if (player.ActiveInventory == iChalk) {
    BtnMark.NormalGraphic = 55;
    BtnMark.MouseOverGraphic = 55;
    BtnMark.Clickable = false;
    player.ActiveInventory = null;
    bFoundCode = true;
    player.MySay("That's it! 179. That must be the code for the lock.");
    player.LoseInventory(iChalk);
  }
  else {
    player.MySay("Hm. Something is scratched in there. But I can barely read it. I need something it make it more visible.");
  }
}

function BtnLock_OnClick(GUIControl *control, MouseButton button)
{
  if (player.HasInventory(iMedkit) || bHelped) {
    player.MySay("I took the medkit. There is nothing else useful inside.");
    }
  else {
    if (bFoundCode) {
      player.MySay("Nice, there is a medkit inside! I'll take it with me.");
      player.AddInventory(iMedkit);
    }
    else {
      player.MySay("There is a number lock on it. But it's locked.");
    }
  }
}

function cSoldierWounded_UseInv()
{
  if (player.ActiveInventory == iMedkit) {
    cSoldierWounded_Interact();
  }
  else {
    player.MySay("That won't help.");
  }
}

function cSuperior_UseInv()
{
  if (player.ActiveInventory == iLetter) {
    if (bSaveLetter) {
      player.MySay("He said he wouldn't be able to deliver it. I need to find someone else.");
    }
    else {
      player.MySay("I might have to give it away, but first I have to solve how to escort the medic team.");
    }
    player.ActiveInventory = null;
  }
}

function cSoldierAggressive_UseInv()
{
  if (player.ActiveInventory == iLetter) {
    player.MySay("Hm. No, I need to find someone else to deliver that letter.");
    player.ActiveInventory = null;
  }
}

function cSoldierPassive_UseInv()
{
  if (player.ActiveInventory == iLetter) {
    if (bSaveLetter) {
      player.MySay("Could you do me a favor?");
      player.MySay("We have a wounded soldier, who gave me this letter.");
      player.MySay("I will try to get a medic team here.");
      player.MySay("I've I don't make it back, please make sure the letter gets delivered to his family.");
      cSoldierPassive.MySay("Oh, wow. Sure... I mean... Sure, I will do my best!");
      cMain.LoseInventory(iLetter);
      bLetterSaved = true;
      dDialog1.SetOptionState(8,eOptionOff);
      dDialog1.SetOptionState(9,eOptionOn);
      dDialog2.SetOptionState(1,eOptionOffForever);
      dDialog2.SetOptionState(2,eOptionOffForever);
      dDialog2.SetOptionState(3,eOptionOn);
    } 
    else {
      player.MySay("Hm. I might have to give it away, but first I need to check how to get the medic team here.");
    }
    player.ActiveInventory = null;
  }
}

function iRifle_Look()
{
  player.MySay("An standard rifle X9HK4.");
}

function iDogtag_Look()
{
  player.MySay("My dogtag, in case I need to be identified.");
}

function iChalk_Look()
{
  player.MySay("A piece of chalk.");
}

function iMedkit_Look()
{
  player.MySay("A Medkit.");
}

function iLetter_Look()
{
  player.MySay("A letter from the wounded soldier.");
}

function SliderGameSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(SliderGameSpeed.Value);
}

function Slider1_OnChange(GUIControl *control)
{
  acMusic.Volume = Slider1.Value;
}
